---
title: "Data wrangling with `dplyr` and `tidyr`"
subtitle: "Data Carpentry for Social Sciences & Humanities"
author: "Aleksandra Wilczynska"
date: 2023-02-23
format: 
  revealjs:
    fig-cap-location: margin  
    footer: "Data wrangling with `dplyr` and `tidyr`"
    chalkboard: true
    incremental: false 
    mouse-wheel: true 
    theme: [default, custom.scss]
---


```{r}
#| label: setup
#| include: false

library(tidyverse)
library(here)

interviews <- read_csv(here("data", "SAFI_clean.csv"), na = "NULL")

knitr::opts_chunk$set(
  cache = FALSE,
  echo = TRUE,
  message = FALSE, 
  warning = FALSE
  )
```

## What is data wrangling?

> **Data wrangling** is the process of reshaping data from its raw format, into a format that is suitable for analysis.

![](img/data-science.png)

<!-- :::{.aside} -->

<!-- [R for Data Science, Wickham H and Grolemund G](https://r4ds.had.co.nz/index.html) © Wickham, Grolemund 2017 -->

<!-- ::: -->

## Exercise 1: `r emo::ji("clock")` **3 mins**

- subset the `interviews` data to include interviews where respondents were members of an irrigation association (`memb_assoc`); 
- retain only the columns `affect_conflicts`, `liv_count`, and `no_meals`;
- use pipes!


```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 3)
```

. . .

```{r}
#| eval: false
interviews %>%
  filter(memb_assoc == "yes") %>%
  select(affect_conflicts, liv_count, no_meals)
```

. . . 


Can you reverse the order of operations? Why? 




## Exercise 2: `r emo::ji("clock")` **5 mins**

Create a new dataframe from the `interviews` data that:

- contains only the `village` column and a new column called `total_meals`, standing for total number of meals served in the household per day on average (`no_membrs` times `no_meals`). 
- Only the rows where `total_meals` is greater than 20 should be shown in the final dataframe.


```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 5)
```

. . .

```{r}
#| eval: false

interviews %>%
  mutate(total_meals = no_membrs * no_meals) %>%
  filter(total_meals > 20) %>%
  select(village, total_meals)
```

## Exercise 3: `r emo::ji("clock")` **7 mins**

1) How many households in the survey have an average of two meals per day? Three meals per day? Are there any other numbers of meals represented?

2) Use `group_by()` and `summarize()` to find the mean, min, and max number of household members for each village. Also add the number of observations (hint: see `?n`).

```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 7)
```



## Coffee break

![](img/coffee_cup_coffee_time.png)


## Solution

1) How many households in the survey have an average of two meals per day? 

```{r}
#| eval: false

interviews %>%
  count(no_meals)
```


2) Find the mean, min, and max number of household members for each village. Add the number of observations.

```{r}
#| eval: false

interviews %>%
  group_by(village) %>%
  summarize(
    mean_no_membrs = mean(no_membrs),
    min_no_membrs = min(no_membrs),
    max_no_membrs = max(no_membrs),
    n = n()
  )
``` 

<!-- ## Tidy dataset -->


<!-- 1. Each **variable** has its own **column** -->
<!-- 2. Each **observation** has its own **row** -->
<!-- 3. Each **value** must have its own **cell** -->

<!-- ![](img/tidy-data-wickham.png) -->

<!-- :::{.aside} -->

<!-- [R for Data Science, Wickham H and Grolemund G](https://r4ds.had.co.nz/index.html) © Wickham, Grolemund 2017 -->
<!-- ::: -->

## Long and wide data formats 

::: {layout="[[40,-10, 50]]" layout-valign="bottom"}


![](img/pivot/long.PNG)


![](img/pivot/wide.PNG)

::: 

## From long to wide 

![](img/pivot/pivot_wider.PNG)


## From wide to long 

![](img/pivot/pivot_longer.PNG)

## Exporting SAFI data
```{r}
#| eval: false

interviews_plotting <- interviews %>%
  ## pivot wider by items_owned
  separate_rows(items_owned, sep = ";") %>%
  ## if there were no items listed, changing NA to no_listed_items
  replace_na(list(items_owned = "no_listed_items")) %>%
  mutate(items_owned_logical = TRUE) %>%
  pivot_wider(names_from = items_owned,
              values_from = items_owned_logical,
              values_fill = list(items_owned_logical = FALSE)) %>%
  ## pivot wider by months_lack_food
  separate_rows(months_lack_food, sep = ";") %>%
  mutate(months_lack_food_logical = TRUE) %>%
  pivot_wider(names_from = months_lack_food,
              values_from = months_lack_food_logical,
              values_fill = list(months_lack_food_logical = FALSE)) %>%
  ## add some summary columns
  mutate(number_months_lack_food = rowSums(select(., Jan:May))) %>%
  mutate(number_items = rowSums(select(., bicycle:car)))

## save the dataframe to our data_output directory
write_csv(interviews_plotting, file = here("data_output/interviews_plotting.csv"))

```

